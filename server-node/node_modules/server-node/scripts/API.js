(function () {

    'use strict';

    var events = require('events');

    function APIProcessor () {
        events.EventEmitter.call(this);

        var _this = this;

        this.rule = [
            {
                name: 'path'
            }
        ];

        this.setRule = function setRule (rule) {
            var ruleData = rule.split('/');
            _this.rule = [];
            ruleData.forEach(function (rulePart) {
                var firstSymbol = rulePart.charAt(0);
                if (firstSymbol !== ':') {
                    _this.rule.push({
                        name: rulePart
                    });
                } else {
                    _this.rule.push({
                        name: rulePart.substr(1)
                    });
                    return 0;
                }
            });
        };

        this.extractParams = function extractParams (apiParams) {
            var params = {},
                paramsData = apiParams.split('/');
            _this.rule.forEach(function (ruleItem, index) {
                if (index !== _this.rule.length - 1) {
                    params[ruleItem.name] = paramsData[index];
                } else {
                    params[ruleItem.name] = paramsData.slice(index, paramsData.length).join('/');
                }
            });
            return params;
        };

        this.completeRequest = function analyzeRequest () {
            if (arguments.length === 2) {
                var callData = arguments[0],
                    socket = arguments[1];
                _this.emit('call', {
                    type: 'ws',
                    params: callData.callBody.params,
                    method: callData.methodName,
                    socket: socket
                });
            } else if (arguments.length === 3) {
                var apiParams = arguments[0],
                    request = arguments[1],
                    response = arguments[2];
                var data = {
                    type: 'http',
                    request: request,
                    response: response,
                    params: _this.extractParams(apiParams)
                };
                _this.emit('call', data);
                _this.emit(request.method.toLowerCase(), data);
            }

        }


    }

    APIProcessor.prototype = Object.create(events.EventEmitter.prototype);
    APIProcessor.prototype.constructor = APIProcessor;

    module.exports = APIProcessor;

}());
