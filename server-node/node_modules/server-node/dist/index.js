(function () {

    'use strict';

    var http = require('http'),
        net = require('net'),
        ws = require('ws'),

        ServerConsole = require('./scripts/ServerConsole'),
        FileProcessor = require('./scripts/FileProcessor'),
        HTTPHandlers = require('./scripts/HTTPHandlers'),
        WSHandlers = require('./scripts/WSHandlers'),
        ApiAnalyser = require('./scripts/ApiAnalyser'),
        API = require('./scripts/API'),

        corsApiProcessor = require('./api/CORS');

    function ServerNode (config) {

        this.config = {
            httpPort: 80,
            wsPort: 5000,
            corsURL: 'cors',
            crossDomain: true,
            log: true
        };

        if (config) {
            this.configure(config);
        }

        this.console = new ServerConsole(this);
        this.api = new ApiAnalyser(this);
        this.httpHandlers = new HTTPHandlers(this);
        this.wsHandlers = new WSHandlers(this);

        this.api.register(this.config.corsURL, corsApiProcessor);

    }

    ServerNode.API = API;
    ServerNode.fileProcessor = new FileProcessor();

    ServerNode.prototype.configure = function configure (config) {
        if (config && config instanceof Object) {
            for (var property in config) {
                if (config.hasOwnProperty(property)) {
                    if (typeof this.config[property] === typeof config[property]) {
                        this.config[property] = config[property];
                    }
                }
            }
        }
    };

    ServerNode.prototype.start = function start (type) {
        type = type || 'http';
        if (type === 'http') {
            this.httpServer = new http.Server();
            this.httpServer.on('request', this.httpHandlers.request);
            this.httpServer.on('error', this.httpHandlers.error);
            this.httpServer.on('listening', this.httpHandlers.listening);
            this.httpServer.listen(this.config.httpPort);
            return this.httpServer;
        } else if (type === 'ws') {
            this.wsConnections = [];
            this.wsServer = new ws.Server({port: this.config.wsPort});
            this.wsServer.on('connection', this.wsHandlers.connection);
            this.wsServer.on('error', this.wsHandlers.error);
            this.wsServer.on('listening', this.wsHandlers.listening);
            return this.wsServer;
        }
    };

    module.exports = ServerNode;

}());
